{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["interface RandomCSSVariableProps {\n  variable?: string;\n  unit?: string;\n  amount?: number;\n  target?: HTMLBodyElement | null;\n  range?: {\n    min?: number;\n    max?: number;\n    round?: boolean;\n  };\n}\n\nconst randomCSSVariable = (opts: RandomCSSVariableProps | RandomCSSVariableProps[]) => {\n  const options = Array.isArray(opts) ? opts : [opts];\n  const GLOBAL_VARS: string[] = [];\n\n  const value = (min: number, max: number, round: boolean) => {\n    const delta = max - min;\n    const rand = round ? Math.round(min + Math.random() * delta) : min + Math.random() * delta;\n\n    return rand;\n  };\n  const generate = ({ amount, variable, unit, range, target, dom }: RandomCSSVariableProps & { dom: boolean }) => {\n    const root = target;\n    const VAR_GROUP_VALUE: { [x: string]: string | number }[] = [];\n    const VAR_GROUP = { [variable as string]: VAR_GROUP_VALUE };\n    const ALL_VARS: string[] = [];\n\n    Array.from({ length: amount! }).map((_, index) => {\n      const VAR_NAME = `--${variable}-${index}`;\n      const VAR_VALUE: string | number = unit\n        ? `${value(range!.min!, range!.max!, range!.round!)}${unit}`\n        : value(range!.min!, range!.max!, range!.round!);\n\n      VAR_GROUP_VALUE.push({ [VAR_NAME as string]: VAR_VALUE as string | number });\n      if (root && dom) {\n        root.style.setProperty(`${VAR_NAME}`, `${VAR_VALUE}`);\n      }\n    });\n\n    ALL_VARS.push(JSON.stringify(VAR_GROUP));\n    GLOBAL_VARS.push(ALL_VARS.join(','));\n  };\n\n  const load = (dom?: boolean) => {\n    options.map(\n      ({\n        variable = 'random',\n        unit = '',\n        amount = 3,\n        target = typeof window === 'undefined' ? null : document.querySelector('body'),\n        range = {\n          min: 1,\n          max: 100,\n          round: false,\n        },\n      }) => {\n        generate({\n          amount,\n          variable,\n          unit,\n          range,\n          target,\n          dom: dom === false ? false : true,\n        });\n      },\n    );\n  };\n\n  const getVars = (i?: number) => {\n    load(false);\n    const result = i ? GLOBAL_VARS[i] : GLOBAL_VARS.join(',');\n    return JSON.parse(`[${result}]`);\n  };\n\n  return { load, getVars };\n};\n\nexport default randomCSSVariable;\n"],"names":["randomCSSVariable","opts","options","Array","isArray","GLOBAL_VARS","value","min","max","round","Math","random","delta","load","dom","map","variable","unit","amount","target","window","document","querySelector","range","root","VAR_GROUP_VALUE","VAR_GROUP","ALL_VARS","from","length","_","index","VAR_VALUE","push","VAR_NAME","style","setProperty","JSON","stringify","join","generate","getVars","i","result","parse"],"mappings":"AAYMA,MAAAA,EAAqBC,IACzB,MAAMC,EAAUC,MAAMC,QAAQH,GAAQA,EAAO,CAACA,GACxCI,EAAwB,GAEnBC,EAAG,CAACC,EAAaC,EAAaC,KACvC,QAAcD,EAAMD,EAGpB,OAFaE,EAAQC,KAAKD,MAAMF,EAAMG,KAAKC,SAAWC,GAASL,EAAMG,KAAKC,SAAWC,GA0B7EC,EAAIC,IACZZ,EAAQa,IACN,EACEC,SAAAA,EAAW,SACXC,KAAAA,EAAO,GACPC,OAAAA,EAAS,EACTC,OAAAA,GAA2B,oBAALC,OAAmB,KAAOC,SAASC,cAAc,SACvEC,MAAAA,EAAQ,CACNhB,IAAK,EACLC,IAAK,IACLC,OAAO,OAhCE,GAAGS,SAAQF,WAAUC,OAAMM,QAAOJ,SAAQL,UACzD,MAAMU,EAAOL,EACPM,EAAsD,GAC7CC,EAAG,CAAEV,CAACA,GAAqBS,GACpCE,EAAqB,GAE3BxB,MAAMyB,KAAK,CAAEC,OAAQX,IAAWH,IAAI,CAACe,EAAGC,KACtC,QAAiB,KAAKf,KAAYe,IAC5BC,EAA6Bf,EAC5B,GAAAX,EAAMiB,EAAOhB,IAAMgB,EAAOf,IAAMe,EAAOd,SAAUQ,IACpDX,EAAMiB,EAAOhB,IAAMgB,EAAOf,IAAMe,EAAOd,OAE3CgB,EAAgBQ,KAAK,CAAEC,CAACA,GAAqBF,IACzCR,GAAQV,GACVU,EAAKW,MAAMC,YAAY,GAAGF,IAAY,GAAGF,IAC1C,GAGHL,EAASM,KAAKI,KAAKC,UAAUZ,IAC7BrB,EAAY4B,KAAKN,EAASY,KAAK,KACjC,EAeMC,CAAS,CACPtB,OAAAA,EACAF,SAAAA,EACAC,KAAAA,EACAM,MAAAA,EACAJ,OAAAA,EACAL,KAAa,IAARA,GAET,IAUJ,MAAO,CAAED,OAAM4B,QANEC,IACf7B,GAAK,GACL,MAAY8B,EAAGD,EAAIrC,EAAYqC,GAAKrC,EAAYkC,KAAK,KACrD,OAAOF,KAAKO,UAAUD,KAAS"}