{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["export interface RandomCSSVariableProps {\n  /** The name of the CSS variable */\n  variable?: string;\n  /** The unit of the CSS variable */\n  unit?: string;\n  /** The amount of CSS variables */\n  count?: number;\n  /** The target element to apply the CSS variables */\n  target?: HTMLBodyElement | null;\n  /** The range of the CSS variable */\n  range?: {\n    /** The minimum value of the CSS variable */\n    min?: number;\n    /** The maximum value of the CSS variable */\n    max?: number;\n    /** Should the value be rounded */\n    round?: boolean;\n  };\n  /** The values of the CSS variable */\n  values?: any[];\n}\n\n/**\n * It generates random CSS variables and applies them to the DOM\n * @param {RandomCSSVariableProps | RandomCSSVariableProps[]} opts - RandomCSSVariableProps |\n * RandomCSSVariableProps[] = {\n * @returns A function that returns an object with two methods: load and getVars.\n */\nconst randomCSSVariable = (\n  opts: RandomCSSVariableProps | RandomCSSVariableProps[] = {\n    count: 3,\n    variable: 'random',\n    unit: '',\n    range: {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target: typeof window === 'undefined' ? null : document.querySelector('body'),\n    values: undefined,\n  },\n) => {\n  const IS_ARRAY = Array.isArray(opts);\n  const options = IS_ARRAY ? opts : [opts];\n  const GLOBAL_VARS: string[] = [];\n\n  /**\n   * It returns a random number between a minimum and maximum value, or a random value from an array of\n   * values\n   * @param {number} min - The minimum value of the range\n   * @param {number} max - The maximum value of the range.\n   * @param {boolean} round - boolean - if true, the random number will be rounded to the nearest integer\n   * @param {number} index - The index of the current iteration.\n   * @returns A random number between min and max.\n   */\n  const value = (min: number, max: number, round: boolean, index: number) => {\n    const VALUES = IS_ARRAY ? opts[index].values : opts.values;\n\n    if (VALUES && VALUES.length > 0) {\n      const randomIndex: number = Math.floor(Math.random() * VALUES.length);\n      const randomValue = VALUES[randomIndex];\n      return randomValue as any;\n    } else {\n      const delta = max - min;\n      const rand = round ? Math.round(min + Math.random() * delta) : min + Math.random() * delta;\n      return rand;\n    }\n  };\n\n  /**\n   * It generates a random number, then assigns it to a CSS variable\n   * @param  - `count` - The count of random variables to generate.\n   */\n  const generate = ({\n    count = 3,\n    variable = 'random',\n    unit = '',\n    range = {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target = typeof window === 'undefined' ? null : document.querySelector('body'),\n    dom,\n    index,\n  }: RandomCSSVariableProps & { dom: boolean; index: number }) => {\n    const root = target;\n    const VAR_GROUP_VALUE: { [x: string]: string | number }[] = [];\n    const VAR_GROUP = { [variable as string]: VAR_GROUP_VALUE };\n\n    // Pre-compute the length of the loop to avoid re-computing it on every iteration\n    const length = count!;\n\n    for (let i = 0; i < length; i++) {\n      const VAR_NAME = count === 1 ? `--${variable}` : `--${variable}-${i}`;\n      const VAR_VALUE: string | number = unit\n        ? `${value(range!.min!, range!.max!, range!.round!, index)}${unit}`\n        : value(range!.min!, range!.max!, range!.round!, index);\n\n      VAR_GROUP_VALUE.push({\n        [VAR_NAME as string]: VAR_VALUE as string | number,\n      });\n      if (root && dom) {\n        root.style.setProperty(`${VAR_NAME}`, `${VAR_VALUE}`);\n      }\n    }\n\n    GLOBAL_VARS.push(JSON.stringify(VAR_GROUP));\n  };\n\n  /**\n   * It takes an array of options, and for each option, it generates a new variable\n   * @param {boolean} [dom] - boolean - whether or not to generate the DOM elements.\n   */\n  const load = (dom?: boolean) => {\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      generate({\n        count: option.count,\n        variable: option.variable,\n        unit: option.unit,\n        range: option.range,\n        target: option.target,\n        values: option.values,\n        dom: dom === false ? false : true,\n        index: i,\n      });\n    }\n  };\n\n  /**\n   * It returns a string of all the global variables in the current scope\n   * @returns A string of the global variables.\n   */\n  const getVars = (count?: number) => {\n    // Explode GLOBAL_VARS into a string of css variables\n    let varStr = '';\n    let VARS = GLOBAL_VARS.map((group) => group);\n\n    for (let i = 0; i < VARS.length; i++) {\n      const groupObj = JSON.parse(VARS[i]);\n      const groupValues: any[] = Object.values(groupObj);\n      const groupValue = groupValues[0].slice(0, count);\n\n      for (let j = 0; j < groupValue.length; j++) {\n        const value = groupValue[j];\n        const valueKeys = Object.keys(value);\n        const valueValues = Object.values(value);\n        const valueKey = valueKeys[0];\n        const valueValue = valueValues[0];\n\n        varStr += `${valueKey}: ${valueValue};`;\n      }\n    }\n\n    return varStr;\n  };\n\n  /**\n   * It returns an array of all the global variables in the current scope\n   * @param {number} [i] - The index of the variable you want to get. If you don't specify this, it will\n   * return all of the variables.\n   * @returns An array of the global variables.\n   */\n  const getVarsJSON = () => {\n    // Avoid calling the load function if it is not necessary\n    if (GLOBAL_VARS.length === 0) {\n      load(false);\n    }\n\n    let result = '[';\n    for (let i = 0; i < GLOBAL_VARS.length; i++) {\n      result += GLOBAL_VARS[i];\n      if (i !== GLOBAL_VARS.length - 1) {\n        result += ',';\n      }\n    }\n    result += ']';\n    return JSON.parse(result);\n  };\n\n  return { load, getVars, getVarsJSON };\n};\n\nexport default randomCSSVariable;\n"],"names":["opts","count","variable","unit","range","min","max","round","target","window","document","querySelector","values","undefined","IS_ARRAY","Array","isArray","options","value","index","VALUES","length","Math","floor","random","delta","generate","_ref","_ref$count","_ref$variable","_ref$unit","_ref$range","_ref$target","dom","root","VAR_GROUP_VALUE","_VAR_GROUP","i","_VAR_GROUP_VALUE$push","VAR_NAME","VAR_VALUE","push","style","setProperty","GLOBAL_VARS","JSON","stringify","VAR_GROUP","load","option","getVars","VARS","map","group","groupObj","parse","groupValue","Object","slice","j","_value","keys","valueValues","varStr","valueKeys","valueValue","getVarsJSON","result"],"mappings":"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"}