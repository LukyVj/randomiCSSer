{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["export interface RandomCSSVariableProps {\n  /** The name of the CSS variable */\n  variable?: string;\n  /** The unit of the CSS variable */\n  unit?: string;\n  /** The amount of CSS variables */\n  count?: number;\n  /** The target element to apply the CSS variables */\n  target?: HTMLBodyElement | null;\n  /** The range of the CSS variable */\n  range?: {\n    /** The minimum value of the CSS variable */\n    min?: number;\n    /** The maximum value of the CSS variable */\n    max?: number;\n    /** Should the value be rounded */\n    round?: boolean;\n  };\n  /** The values of the CSS variable */\n  values?: any[];\n}\n\n/**\n * It generates random CSS variables and applies them to the DOM\n * @param {RandomCSSVariableProps | RandomCSSVariableProps[]} opts - RandomCSSVariableProps |\n * RandomCSSVariableProps[] = {\n * @returns A function that returns an object with two methods: load and getVars.\n */\nconst randomCSSVariable = (\n  opts: RandomCSSVariableProps | RandomCSSVariableProps[] = {\n    count: 3,\n    variable: 'random',\n    unit: '',\n    range: {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target: typeof window === 'undefined' ? null : document.querySelector('body'),\n    values: undefined,\n  },\n) => {\n  const IS_ARRAY = Array.isArray(opts);\n  const options = IS_ARRAY ? opts : [opts];\n  const GLOBAL_VARS: string[] = [];\n\n  /**\n   * It returns a random number between a minimum and maximum value, or a random value from an array of\n   * values\n   * @param {number} min - The minimum value of the range\n   * @param {number} max - The maximum value of the range.\n   * @param {boolean} round - boolean - if true, the random number will be rounded to the nearest integer\n   * @param {number} index - The index of the current iteration.\n   * @returns A random number between min and max.\n   */\n  const value = (min: number, max: number, round: boolean, index: number) => {\n    const VALUES = IS_ARRAY ? opts[index].values : opts.values;\n\n    if (VALUES && VALUES.length > 0) {\n      const randomIndex: number = Math.floor(Math.random() * VALUES.length);\n      const randomValue = VALUES[randomIndex];\n      return randomValue as any;\n    } else {\n      const delta = max - min;\n      const rand = round ? Math.round(min + Math.random() * delta) : min + Math.random() * delta;\n      return rand;\n    }\n  };\n\n  /**\n   * It generates a random number, then assigns it to a CSS variable\n   * @param  - `count` - The count of random variables to generate.\n   */\n  const generate = ({\n    count = 3,\n    variable = 'random',\n    unit = '',\n    range = {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target = typeof window === 'undefined' ? null : document.querySelector('body'),\n    dom,\n    index,\n  }: RandomCSSVariableProps & { dom: boolean; index: number }) => {\n    const root = target;\n    const VAR_GROUP_VALUE: { [x: string]: string | number }[] = [];\n    const VAR_GROUP = { [variable as string]: VAR_GROUP_VALUE };\n\n    // Pre-compute the length of the loop to avoid re-computing it on every iteration\n    const length = count!;\n\n    for (let i = 0; i < length; i++) {\n      const VAR_NAME = count === 1 ? `--${variable}` : `--${variable}-${i}`;\n      const VAR_VALUE: string | number = unit\n        ? `${value(range!.min!, range!.max!, range!.round!, index)}${unit}`\n        : value(range!.min!, range!.max!, range!.round!, index);\n\n      VAR_GROUP_VALUE.push({\n        [VAR_NAME as string]: VAR_VALUE as string | number,\n      });\n      if (root && dom) {\n        root.style.setProperty(`${VAR_NAME}`, `${VAR_VALUE}`);\n      }\n    }\n\n    GLOBAL_VARS.push(JSON.stringify(VAR_GROUP));\n  };\n\n  /**\n   * It takes an array of options, and for each option, it generates a new variable\n   * @param {boolean} [dom] - boolean - whether or not to generate the DOM elements.\n   */\n  const load = (dom?: boolean) => {\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      generate({\n        count: option.count,\n        variable: option.variable,\n        unit: option.unit,\n        range: option.range,\n        target: option.target,\n        values: option.values,\n        dom: dom === false ? false : true,\n        index: i,\n      });\n    }\n  };\n\n  /**\n   * It returns a string of all the global variables in the current scope\n   * @returns A string of the global variables.\n   */\n  const getVars = (count?: number) => {\n    load(false);\n\n    let varStr = '';\n\n    for (const group of GLOBAL_VARS) {\n      const groupObj = JSON.parse(group);\n      const groupValues = Object.values(groupObj);\n      const groupValue = (groupValues[0] as any).slice(0, count);\n\n      for (const val of groupValue) {\n        const valueKeys = Object.keys(val);\n        const valueValues = Object.values(val);\n        const valueKey = valueKeys[0];\n        const valueValue = valueValues[0];\n\n        varStr += `${valueKey}: ${valueValue};`;\n      }\n    }\n\n    return varStr;\n  };\n\n  /**\n   * It returns an array of all the global variables in the current scope\n   * @param {number} [i] - The index of the variable you want to get. If you don't specify this, it will\n   * return all of the variables.\n   * @returns An array of the global variables.\n   */\n  const getVarsJSON = () => {\n    // Avoid calling the load function if it is not necessary\n    if (GLOBAL_VARS.length === 0) {\n      load(false);\n    }\n\n    let result = '[';\n    for (let i = 0; i < GLOBAL_VARS.length; i++) {\n      result += GLOBAL_VARS[i];\n      if (i !== GLOBAL_VARS.length - 1) {\n        result += ',';\n      }\n    }\n    result += ']';\n    return JSON.parse(result);\n  };\n\n  return { load, getVars, getVarsJSON };\n};\n\nexport default randomCSSVariable;\n"],"names":["opts","count","variable","unit","range","min","max","round","target","window","document","querySelector","values","undefined","IS_ARRAY","Array","isArray","options","GLOBAL_VARS","value","index","VALUES","length","Math","floor","random","delta","generate","_ref","_ref$count","_ref$variable","_ref$unit","_ref$range","_ref$target","dom","root","VAR_GROUP_VALUE","i","_VAR_GROUP_VALUE$push","VAR_VALUE","push","VAR_NAME","style","setProperty","JSON","stringify","VAR_GROUP","load","option","getVars","_step","varStr","_iterator","_createForOfIteratorHelperLoose","done","_step2","groupObj","parse","Object","slice","_iterator2","val","valueKeys","keys","valueValues","valueValue","getVarsJSON","result"],"mappings":"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"}