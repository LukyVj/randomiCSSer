{"version":3,"file":"index.module.js","sources":["../src/index.ts"],"sourcesContent":["export interface RandomCSSVariableProps {\n  /** The name of the CSS variable */\n  variable?: string;\n  /** The unit of the CSS variable */\n  unit?: string;\n  /** The amount of CSS variables */\n  amount?: number;\n  /** The target element to apply the CSS variables */\n  target?: HTMLBodyElement | null;\n  /** The range of the CSS variable */\n  range?: {\n    /** The minimum value of the CSS variable */\n    min?: number;\n    /** The maximum value of the CSS variable */\n    max?: number;\n    /** Should the value be rounded */\n    round?: boolean;\n  };\n  /** The values of the CSS variable */\n  values?: any[];\n}\n\n/**\n * It generates random CSS variables and applies them to the DOM\n * @param {RandomCSSVariableProps | RandomCSSVariableProps[]} opts - RandomCSSVariableProps |\n * RandomCSSVariableProps[] = {\n * @returns A function that returns an object with two methods: load and getVars.\n */\nconst randomCSSVariable = (\n  opts: RandomCSSVariableProps | RandomCSSVariableProps[] = {\n    amount: 3,\n    variable: 'random',\n    unit: '',\n    range: {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target: typeof window === 'undefined' ? null : document.querySelector('body'),\n    values: undefined,\n  },\n) => {\n  const IS_ARRAY = Array.isArray(opts);\n  const options = IS_ARRAY ? opts : [opts];\n  const GLOBAL_VARS: string[] = [];\n\n  /**\n   * It returns a random number between a minimum and maximum value, or a random value from an array of\n   * values\n   * @param {number} min - The minimum value of the range\n   * @param {number} max - The maximum value of the range.\n   * @param {boolean} round - boolean - if true, the random number will be rounded to the nearest integer\n   * @param {number} index - The index of the current iteration.\n   * @returns A random number between min and max.\n   */\n  const value = (min: number, max: number, round: boolean, index: number) => {\n    const VALUES = IS_ARRAY ? opts[index].values : opts.values;\n\n    if (VALUES && VALUES.length > 0) {\n      const randomIndex: number = Math.floor(Math.random() * VALUES.length);\n      const randomValue = VALUES[randomIndex];\n      return randomValue as any;\n    } else {\n      const delta = max - min;\n      const rand = round ? Math.round(min + Math.random() * delta) : min + Math.random() * delta;\n      return rand;\n    }\n  };\n\n  /**\n   * It generates a random number, then assigns it to a CSS variable\n   * @param  - `amount` - The amount of random variables to generate.\n   */\n  const generate = ({\n    amount = 3,\n    variable = 'random',\n    unit = '',\n    range = {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target = typeof window === 'undefined' ? null : document.querySelector('body'),\n    dom,\n    index,\n  }: RandomCSSVariableProps & { dom: boolean; index: number }) => {\n    const root = target;\n    const VAR_GROUP_VALUE: { [x: string]: string | number }[] = [];\n    const VAR_GROUP = { [variable as string]: VAR_GROUP_VALUE };\n    const ALL_VARS: string[] = [];\n\n    Array.from({ length: amount! }).map((_, idx) => {\n      const VAR_NAME = amount === 1 ? `--${variable}` : `--${variable}-${idx}`;\n      const VAR_VALUE: string | number = unit\n        ? `${value(range!.min!, range!.max!, range!.round!, index)}${unit}`\n        : value(range!.min!, range!.max!, range!.round!, index);\n\n      VAR_GROUP_VALUE.push({\n        [VAR_NAME as string]: VAR_VALUE as string | number,\n      });\n      if (root && dom) {\n        root.style.setProperty(`${VAR_NAME}`, `${VAR_VALUE}`);\n      }\n\n      return null;\n    });\n\n    ALL_VARS.push(JSON.stringify(VAR_GROUP));\n    GLOBAL_VARS.push(ALL_VARS.join(','));\n  };\n\n  /**\n   * It takes an array of options, and for each option, it generates a new variable\n   * @param {boolean} [dom] - boolean - whether or not to generate the DOM elements.\n   */\n  const load = (dom?: boolean) => {\n    options.map(({ variable, unit, amount, target, range, values }, index: number) => {\n      generate({\n        amount,\n        variable,\n        unit,\n        range,\n        target,\n        values,\n        dom: dom === false ? false : true,\n        index,\n      });\n    });\n  };\n\n  /**\n   * It returns a string of all the global variables in the current scope\n   * @returns A string of the global variables.\n   */\n  const getVars = () => {\n    load(false);\n    return GLOBAL_VARS.join(';');\n  };\n\n  /**\n   * It returns an array of all the global variables in the current scope\n   * @param {number} [i] - The index of the variable you want to get. If you don't specify this, it will\n   * return all of the variables.\n   * @returns An array of the global variables.\n   */\n  const getVarsJSON = (i?: number) => {\n    load(false);\n    const result = i ? GLOBAL_VARS[i] : GLOBAL_VARS.join(',');\n    return JSON.parse(`[${result}]`);\n  };\n\n  return { load, getVars, getVarsJSON };\n};\n\nexport default randomCSSVariable;\n"],"names":["randomCSSVariable","opts","amount","variable","unit","range","min","max","round","target","window","document","querySelector","values","undefined","Array","isArray","options","IS_ARRAY","GLOBAL_VARS","value","index","VALUES","length","Math","floor","random","delta","load","dom","map","_ref2","_ref","_ref$amount","_ref$variable","_ref$unit","_ref$range","_ref$target","root","VAR_GROUP_VALUE","ALL_VARS","from","_","idx","_VAR_GROUP_VALUE$push","VAR_NAME","VAR_VALUE","push","style","setProperty","JSON","stringify","VAR_GROUP","join","generate","getVars","getVarsJSON","i","result","parse"],"mappings":"AA4BMA,IAAiBA,EAAG,SACxBC,QAAAA,IAAAA,IAAAA,EAA0D,CACxDC,OAAQ,EACRC,SAAU,SACVC,KAAM,GACNC,MAAO,CACLC,IAAK,EACLC,IAAK,IACLC,OAAO,GAETC,OAA0B,oBAAXC,OAAyB,KAAOC,SAASC,cAAc,QACtEC,YAAQC,IAGV,MAAiBC,MAAMC,QAAQf,GAClBgB,EAAGC,EAAWjB,EAAO,CAACA,GAClBkB,EAAa,GAWnBC,EAAG,SAACd,EAAaC,EAAaC,EAAgBa,GACvD,IAAMC,EAASJ,EAAWjB,EAAKoB,GAAOR,OAASZ,EAAKY,OAEpD,GAAIS,GAAUA,EAAOC,OAAS,EAG5B,OADoBD,EADQE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOC,SAI9D,MAAchB,EAAMD,EAEpB,OADaE,EAAQgB,KAAKhB,MAAMF,EAAMkB,KAAKE,SAAWC,GAASrB,EAAMkB,KAAKE,SAAWC,CAGzF,EAgDMC,EAAO,SAACC,GACZZ,EAAQa,IAAI,SAAAC,EAAoDV,IA3CjD,SAAHW,aACZ9B,OAAAA,OAAM,IAAA+B,EAAG,EACT9B,EAAAA,EAAAA,EAAAA,SAAAA,aAAW,SAAQ+B,EAAAC,EAAAH,EACnB5B,KAAAA,OAAI,IAAA+B,EAAG,GAAEA,EAAAC,EAAAJ,EACT3B,MAAAA,OAAQ,IAAA+B,EAAA,CACN9B,IAAK,EACLC,IAAK,IACLC,OAAO,GACR4B,EAAAC,EAAAL,EACDvB,OAAAA,OAAS,IAAA4B,EAAkB,2BAAc,KAAO1B,SAASC,cAAc,QACvEiB,EAAAA,IAAAA,IACAR,EAAKW,EAALX,MAEMiB,EAAO7B,EACP8B,EAAsD,OACvCpC,EAAAA,IAAAA,GAAqBoC,KAC5BC,EAAa,GAE3BzB,MAAM0B,KAAK,CAAElB,OAAQrB,IAAW4B,IAAI,SAACY,EAAGC,GAAO,IAAAC,EACvCC,EAAsB,IAAX3C,OAAoBC,EAAQ,KAAUA,EAAQ,IAAIwC,EAC7DG,EAA6B1C,EAAI,GAChCgB,EAAMf,EAAOC,IAAMD,EAAOE,IAAMF,EAAOG,MAAQa,GAASjB,EAC3DgB,EAAMf,EAAOC,IAAMD,EAAOE,IAAMF,EAAOG,MAAQa,GASnD,OAPAkB,EAAgBQ,OACbF,EAAAA,CAAAA,GAAAA,GAAqBC,MAEpBR,GAAQT,GACVS,EAAKU,MAAMC,YAAW,GAAIJ,EAAQ,GAAOC,GAGpC,IACT,GAEAN,EAASO,KAAKG,KAAKC,UAAUC,IAC7BjC,EAAY4B,KAAKP,EAASa,KAAK,KACjC,CAQIC,CAAS,CACPpD,OAF2BA,EAAAA,OAG3BC,SAHmB4B,EAAR5B,SAIXC,KAJyB2B,EAAJ3B,KAKrBC,QAL2CA,MAM3CI,OANmCA,EAAAA,OAOnCI,OAPwDkB,EAANlB,OAQlDgB,KAAa,IAARA,EACLR,MAAAA,GAEJ,EACF,EAuBA,MAAO,CAAEO,KAAAA,EAAM2B,QAjBC,WAEd,OADA3B,GAAK,GACaT,EAACkC,KAAK,IAC1B,EAcwBG,YANJ,SAACC,GACnB7B,GAAK,GACL,IAAY8B,EAAGD,EAAItC,EAAYsC,GAAKtC,EAAYkC,KAAK,KACrD,OAAOH,KAAKS,MAAUD,IAAAA,MACxB,EAGF"}