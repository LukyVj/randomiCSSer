{"version":3,"file":"index.module.js","sources":["../src/index.ts"],"sourcesContent":["interface RandomCSSVariableProps {\n  /** The name of the CSS variable */\n  variable?: string;\n  /** The unit of the CSS variable */\n  unit?: string;\n  /** The amount of CSS variables */\n  amount?: number;\n  /** The target element to apply the CSS variables */\n  target?: HTMLBodyElement | null;\n  /** The range of the CSS variable */\n  range?: {\n    /** The minimum value of the CSS variable */\n    min?: number;\n    /** The maximum value of the CSS variable */\n    max?: number;\n    /** Should the value be rounded */\n    round?: boolean;\n  };\n  /** The values of the CSS variable */\n  values?: any[];\n}\n\nconst randomCSSVariable = (\n  opts: RandomCSSVariableProps | RandomCSSVariableProps[] = {\n    amount: 3,\n    variable: 'random',\n    unit: '',\n    range: {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target: typeof window === 'undefined' ? null : document.querySelector('body'),\n    values: undefined,\n  },\n) => {\n  const IS_ARRAY = Array.isArray(opts);\n  const options = IS_ARRAY ? opts : [opts];\n  const GLOBAL_VARS: string[] = [];\n\n  const value = (min: number, max: number, round: boolean, index: number) => {\n    const VALUES = IS_ARRAY ? opts[index].values : opts.values;\n\n    if (VALUES && VALUES.length > 0) {\n      const randomIndex: number = Math.floor(Math.random() * VALUES.length);\n      const randomValue = VALUES[randomIndex];\n      return randomValue as any;\n    } else {\n      const delta = max - min;\n      const rand = round ? Math.round(min + Math.random() * delta) : min + Math.random() * delta;\n      return rand;\n    }\n  };\n\n  const generate = ({\n    amount = 3,\n    variable = 'random',\n    unit = '',\n    range = {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target = typeof window === 'undefined' ? null : document.querySelector('body'),\n    dom,\n    index,\n  }: RandomCSSVariableProps & { dom: boolean; index: number }) => {\n    const root = target;\n    const VAR_GROUP_VALUE: { [x: string]: string | number }[] = [];\n    const VAR_GROUP = { [variable as string]: VAR_GROUP_VALUE };\n    const ALL_VARS: string[] = [];\n\n    Array.from({ length: amount! }).map((_, idx) => {\n      const VAR_NAME = amount === 1 ? `--${variable}` : `--${variable}-${idx}`;\n      const VAR_VALUE: string | number = unit\n        ? `${value(range!.min!, range!.max!, range!.round!, index)}${unit}`\n        : value(range!.min!, range!.max!, range!.round!, index);\n\n      VAR_GROUP_VALUE.push({\n        [VAR_NAME as string]: VAR_VALUE as string | number,\n      });\n      if (root && dom) {\n        root.style.setProperty(`${VAR_NAME}`, `${VAR_VALUE}`);\n      }\n\n      return null;\n    });\n\n    ALL_VARS.push(JSON.stringify(VAR_GROUP));\n    GLOBAL_VARS.push(ALL_VARS.join(','));\n  };\n\n  const load = (dom?: boolean) => {\n    options.map(({ variable, unit, amount, target, range, values }, index: number) => {\n      generate({\n        amount,\n        variable,\n        unit,\n        range,\n        target,\n        values,\n        dom: dom === false ? false : true,\n        index,\n      });\n    });\n  };\n\n  const getVars = (i?: number) => {\n    load(false);\n    const result = i ? GLOBAL_VARS[i] : GLOBAL_VARS.join(',');\n    return JSON.parse(`[${result}]`);\n  };\n\n  return { load, getVars };\n};\n\nexport default randomCSSVariable;\n"],"names":["randomCSSVariable","opts","amount","variable","unit","range","min","max","round","target","window","document","querySelector","values","undefined","IS_ARRAY","Array","isArray","options","GLOBAL_VARS","value","index","VALUES","length","Math","floor","random","delta","load","dom","map","_ref","_VAR_GROUP","_ref$amount","_ref$variable","_ref$unit","_ref$range","_ref$target","root","VAR_GROUP_VALUE","VAR_GROUP","ALL_VARS","from","_","idx","_VAR_GROUP_VALUE$push","VAR_NAME","VAR_VALUE","push","style","setProperty","JSON","stringify","join","generate","_ref2","getVars","i","result","parse"],"mappings":"AAsBMA,IAAiBA,EAAG,SACxBC,QAA0D,IAA1DA,IAAAA,EAA0D,CACxDC,OAAQ,EACRC,SAAU,SACVC,KAAM,GACNC,MAAO,CACLC,IAAK,EACLC,IAAK,IACLC,OAAO,GAETC,OAA0B,oBAAXC,OAAyB,KAAOC,SAASC,cAAc,QACtEC,YAAQC,IAGV,IAAcC,EAAGC,MAAMC,QAAQhB,GACzBiB,EAAUH,EAAWd,EAAO,CAACA,GAC7BkB,EAAwB,GAEnBC,EAAG,SAACd,EAAaC,EAAaC,EAAgBa,GACvD,IAAMC,EAASP,EAAWd,EAAKoB,GAAOR,OAASZ,EAAKY,OAEpD,GAAIS,GAAUA,EAAOC,OAAS,EAG5B,OADoBD,EADQE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOC,SAI9D,IAAWI,EAAGpB,EAAMD,EAEpB,OADaE,EAAQgB,KAAKhB,MAAMF,EAAMkB,KAAKE,SAAWC,GAASrB,EAAMkB,KAAKE,SAAWC,CAGzF,EAwCUC,EAAG,SAACC,GACZX,EAAQY,IAAI,SAAoDT,EAAAA,IAvCjD,SAY8CU,GAAA,IAAAC,EAAAC,EAAAF,EAX7D7B,OAAAA,OAAS,IAAA+B,EAAA,EACT9B,EAAAA,EAAAA,EAAAA,SAAAA,OAAW,IAAA+B,EAAA,SACX9B,EAAAA,EAAAA,EAAAA,KAAAA,OAAO,IAAA+B,EAAA,SACP9B,MAAAA,OAAK,IAAA+B,EAAG,CACN9B,IAAK,EACLC,IAAK,IACLC,OAAO,SAETC,OAAAA,OAAM,IAAA4B,EAAqB,oBAAX3B,OAAyB,KAAOC,SAASC,cAAc,UACvEiB,EAAGE,EAAHF,IACAR,EAAKU,EAALV,MAEUiB,EAAG7B,EACP8B,EAAsD,GACtDC,IAAerC,EAAAA,CAAAA,GAAAA,GAAqBoC,EAAiBP,GACrDS,EAAqB,GAE3BzB,MAAM0B,KAAK,CAAEnB,OAAQrB,IAAW4B,IAAI,SAACa,EAAGC,GAAO,IAAAC,EACvCC,EAAsB,IAAX5C,EAAY,KAAQC,EAAQ,KAAUA,EAAQ,IAAIyC,EAC7DG,EAA6B3C,EAC5BgB,GAAAA,EAAMf,EAAOC,IAAMD,EAAOE,IAAMF,EAAOG,MAAQa,GAASjB,EAC3DgB,EAAMf,EAAOC,IAAMD,EAAOE,IAAMF,EAAOG,MAAQa,GASnD,OAPAkB,EAAgBS,OACbF,EAAAA,IAAAA,GAAqBC,EACtBF,IACEP,GAAQT,GACVS,EAAKW,MAAMC,YAAW,GAAIJ,EAAQ,GAAOC,OAI7C,GAEAN,EAASO,KAAKG,KAAKC,UAAUZ,IAC7BrB,EAAY6B,KAAKP,EAASY,KAAK,KACjC,CAIIC,CAAS,CACPpD,OAFiCqD,EAANrD,OAG3BC,SAHWA,EAAAA,SAIXC,KAJqBA,EAAAA,KAKrBC,MAL2CA,EAAAA,MAM3CI,OANyC8C,EAAN9C,OAOnCI,OAPkDA,EAAAA,OAQlDgB,KAAa,IAARA,EACLR,MAAAA,GAEJ,EACF,EAQA,MAAO,CAAEO,KAAAA,EAAM4B,QANC,SAACC,GACf7B,GAAK,GACL,IAAM8B,EAASD,EAAItC,EAAYsC,GAAKtC,EAAYkC,KAAK,KACrD,OAAWF,KAACQ,MAAUD,IAAAA,EACxB,IAAA,EAGF"}