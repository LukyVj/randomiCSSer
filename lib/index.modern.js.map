{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["/**\n *# @preserve version:#version#\n * RandomCSSVariable\n * @version#version#\n * @license MIT\n * @author @LukyVj\n * @url https://github.com/LukyVj/randomicsser\n *\n * ------------------------------\n *\n * @name randomCSSVariable\n * @description Generate random CSS variables\n * @param {object} opts\n * @param {string} opts.variable - The name of the CSS variable\n * @param {string} opts.unit - The unit of the CSS variable\n * @param {number} opts.amount - The amount of CSS variables to generate\n * @param {object} opts.range - The range of the CSS variable\n * @param {number} opts.range.min - The minimum value of the CSS variable\n * @param {number} opts.range.max - The maximum value of the CSS variable\n * @param {boolean} opts.range.round - Whether to round the CSS variable\n * @param {HTMLElement} opts.target - The target element to apply the CSS variable\n * @param {array} opts.values - The values of the CSS variable\n * @returns {object} - The CSS variable\n *\n */\n\ninterface RandomCSSVariableProps {\n  variable?: string;\n  unit?: string;\n  amount?: number;\n  target?: HTMLBodyElement | null;\n  range?: {\n    min?: number;\n    max?: number;\n    round?: boolean;\n  };\n  values?: any[];\n}\n\nconst randomCSSVariable = (\n  opts: RandomCSSVariableProps | RandomCSSVariableProps[] = {\n    amount: 3,\n    variable: 'random',\n    unit: '',\n    range: {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target: typeof window === 'undefined' ? null : document.querySelector('body'),\n    values: undefined,\n  },\n) => {\n  const IS_ARRAY = Array.isArray(opts);\n  const options = IS_ARRAY ? opts : [opts];\n  const GLOBAL_VARS: string[] = [];\n\n  const value = (min: number, max: number, round: boolean, index: number) => {\n    const VALUES = IS_ARRAY ? opts[index].values : opts.values;\n\n    if (VALUES && VALUES.length > 0) {\n      const randomIndex: number = Math.floor(Math.random() * VALUES.length);\n      const randomValue = VALUES[randomIndex];\n      return randomValue as any;\n    } else {\n      const delta = max - min;\n      const rand = round ? Math.round(min + Math.random() * delta) : min + Math.random() * delta;\n      return rand;\n    }\n  };\n\n  const generate = ({\n    amount = 3,\n    variable = 'random',\n    unit = '',\n    range = {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target = typeof window === 'undefined' ? null : document.querySelector('body'),\n    dom,\n    index,\n  }: RandomCSSVariableProps & { dom: boolean; index: number }) => {\n    const root = target;\n    const VAR_GROUP_VALUE: { [x: string]: string | number }[] = [];\n    const VAR_GROUP = { [variable as string]: VAR_GROUP_VALUE };\n    const ALL_VARS: string[] = [];\n\n    Array.from({ length: amount! }).map((_, idx) => {\n      const VAR_NAME = amount === 1 ? `--${variable}` : `--${variable}-${idx}`;\n      const VAR_VALUE: string | number = unit\n        ? `${value(range!.min!, range!.max!, range!.round!, index)}${unit}`\n        : value(range!.min!, range!.max!, range!.round!, index);\n\n      VAR_GROUP_VALUE.push({\n        [VAR_NAME as string]: VAR_VALUE as string | number,\n      });\n      if (root && dom) {\n        root.style.setProperty(`${VAR_NAME}`, `${VAR_VALUE}`);\n      }\n\n      return null;\n    });\n\n    ALL_VARS.push(JSON.stringify(VAR_GROUP));\n    GLOBAL_VARS.push(ALL_VARS.join(','));\n  };\n\n  const load = (dom?: boolean) => {\n    options.map(({ variable, unit, amount, target, range, values }, index: number) => {\n      generate({\n        amount,\n        variable,\n        unit,\n        range,\n        target,\n        values,\n        dom: dom === false ? false : true,\n        index,\n      });\n    });\n  };\n\n  const getVars = (i?: number) => {\n    load(false);\n    const result = i ? GLOBAL_VARS[i] : GLOBAL_VARS.join(',');\n    return JSON.parse(`[${result}]`);\n  };\n\n  return { load, getVars };\n};\n\nexport default randomCSSVariable;\n"],"names":["randomCSSVariable","opts","amount","variable","unit","range","min","max","round","target","window","document","querySelector","values","undefined","IS_ARRAY","Array","isArray","options","GLOBAL_VARS","value","index","VALUES","length","Math","floor","random","delta","load","dom","map","root","VAR_GROUP","_variable","VAR_GROUP_VALUE","ALL_VARS","from","_","idx","VAR_NAME","VAR_VALUE","push","style","setProperty","JSON","stringify","join","generate","getVars","i","result","parse"],"mappings":"AAuCMA,MAAiBA,EAAG,CACxBC,EAA0D,CACxDC,OAAQ,EACRC,SAAU,SACVC,KAAM,GACNC,MAAO,CACLC,IAAK,EACLC,IAAK,IACLC,OAAO,GAETC,OAA0B,oBAALC,OAAmB,KAAOC,SAASC,cAAc,QACtEC,YAAQC,MAGV,MAAcC,EAAGC,MAAMC,QAAQhB,GACzBiB,EAAUH,EAAWd,EAAO,CAACA,GAClBkB,EAAa,GAExBC,EAAQ,CAACd,EAAaC,EAAaC,EAAgBa,KACvD,MAAMC,EAASP,EAAWd,EAAKoB,GAAOR,OAASZ,EAAKY,OAEpD,GAAIS,GAAUA,EAAOC,OAAS,EAG5B,OADoBD,EADQE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOC,SAGzD,CACL,MAAMI,EAAQpB,EAAMD,EAEpB,OADaE,EAAQgB,KAAKhB,MAAMF,EAAMkB,KAAKE,SAAWC,GAASrB,EAAMkB,KAAKE,SAAWC,CAEtF,GAyCGC,EAAQC,IACZX,EAAQY,IAAI,EAAG3B,WAAUC,OAAMF,SAAQO,SAAQJ,QAAOQ,UAAUQ,KAvCjD,GACfnB,OAAAA,EAAS,EACTC,SAAAA,EAAW,SACXC,KAAAA,EAAO,GACPC,MAAAA,EAAQ,CACNC,IAAK,EACLC,IAAK,IACLC,OAAO,GAETC,OAAAA,GAA2B,oBAALC,OAAmB,KAAOC,SAASC,cAAc,SACvEiB,MACAR,YAEA,MAAMU,EAAOtB,IAC+C,GAC7CuB,EAAG,CAAEC,CAAC9B,GAAqB+B,GAC5BC,EAAa,GAE3BnB,MAAMoB,KAAK,CAAEb,OAAQrB,IAAW4B,IAAI,CAACO,EAAGC,KACtC,MAAMC,EAAsB,IAAXrC,EAAe,KAAKC,IAAa,KAAKA,KAAYmC,IAC7DE,EAA6BpC,KAC5BgB,EAAMf,EAAOC,IAAMD,EAAOE,IAAMF,EAAOG,MAAQa,KAASjB,IAC3DgB,EAAMf,EAAOC,IAAMD,EAAOE,IAAMF,EAAOG,MAAQa,GASnD,OAPAa,EAAgBO,KAAK,CACnBF,CAACA,GAAqBC,IAEpBT,GAAQF,GACVE,EAAKW,MAAMC,YAAY,GAAGJ,IAAY,GAAGC,KAI7C,OAEAL,EAASM,KAAKG,KAAKC,UAAUb,IAC7Bb,EAAYsB,KAAKN,EAASW,KAAK,KACjC,EAIIC,CAAS,CACP7C,SACAC,WACAC,OACAC,QACAI,SACAI,SACAgB,KAAa,IAARA,EACLR,WAEH,EASH,MAAO,CAAEO,OAAMoB,QANEC,IACfrB,GAAK,GACL,MAAMsB,EAASD,EAAI9B,EAAY8B,GAAK9B,EAAY2B,KAAK,KACrD,OAAOF,KAAKO,UAAUD,KAAS"}