{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["export interface RandomCSSVariableProps {\n  /** The name of the CSS variable */\n  variable?: string;\n  /** The unit of the CSS variable */\n  unit?: string;\n  /** The amount of CSS variables */\n  count?: number;\n  /** The target element to apply the CSS variables */\n  target?: HTMLBodyElement | null;\n  /** The range of the CSS variable */\n  range?: {\n    /** The minimum value of the CSS variable */\n    min?: number;\n    /** The maximum value of the CSS variable */\n    max?: number;\n    /** Should the value be rounded */\n    round?: boolean;\n  };\n  /** The values of the CSS variable */\n  values?: any[];\n}\n\n/**\n * It generates random CSS variables and applies them to the DOM\n * @param {RandomCSSVariableProps | RandomCSSVariableProps[]} opts - RandomCSSVariableProps |\n * RandomCSSVariableProps[] = {\n * @returns A function that returns an object with two methods: load and getVars.\n */\nconst randomCSSVariable = (\n  opts: RandomCSSVariableProps | RandomCSSVariableProps[] = {\n    count: 3,\n    variable: 'random',\n    unit: '',\n    range: {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target: typeof window === 'undefined' ? null : document.querySelector('body'),\n    values: undefined,\n  },\n) => {\n  const IS_ARRAY = Array.isArray(opts);\n  const options = IS_ARRAY ? opts : [opts];\n  const GLOBAL_VARS: string[] = [];\n\n  /**\n   * It returns a random number between a minimum and maximum value, or a random value from an array of\n   * values\n   * @param {number} min - The minimum value of the range\n   * @param {number} max - The maximum value of the range.\n   * @param {boolean} round - boolean - if true, the random number will be rounded to the nearest integer\n   * @param {number} index - The index of the current iteration.\n   * @returns A random number between min and max.\n   */\n  const value = (min: number, max: number, round: boolean, index: number) => {\n    const VALUES = IS_ARRAY ? opts[index].values : opts.values;\n\n    if (VALUES && VALUES.length > 0) {\n      const randomIndex: number = Math.floor(Math.random() * VALUES.length);\n      const randomValue = VALUES[randomIndex];\n      return randomValue as any;\n    } else {\n      const delta = max - min;\n      const rand = round ? Math.round(min + Math.random() * delta) : min + Math.random() * delta;\n      return rand;\n    }\n  };\n\n  /**\n   * It generates a random number, then assigns it to a CSS variable\n   * @param  - `count` - The count of random variables to generate.\n   */\n  const generate = ({\n    count = 3,\n    variable = 'random',\n    unit = '',\n    range = {\n      min: 1,\n      max: 100,\n      round: false,\n    },\n    target = typeof window === 'undefined' ? null : document.querySelector('body'),\n    dom,\n    index,\n  }: RandomCSSVariableProps & { dom: boolean; index: number }) => {\n    const root = target;\n    const VAR_GROUP_VALUE: { [x: string]: string | number }[] = [];\n    const VAR_GROUP = { [variable as string]: VAR_GROUP_VALUE };\n\n    // Pre-compute the length of the loop to avoid re-computing it on every iteration\n    const length = count!;\n\n    for (let i = 0; i < length; i++) {\n      const VAR_NAME = count === 1 ? `--${variable}` : `--${variable}-${i}`;\n      const VAR_VALUE: string | number = unit\n        ? `${value(range!.min!, range!.max!, range!.round!, index)}${unit}`\n        : value(range!.min!, range!.max!, range!.round!, index);\n\n      VAR_GROUP_VALUE.push({\n        [VAR_NAME as string]: VAR_VALUE as string | number,\n      });\n      if (root && dom) {\n        root.style.setProperty(`${VAR_NAME}`, `${VAR_VALUE}`);\n      }\n    }\n\n    GLOBAL_VARS.push(JSON.stringify(VAR_GROUP));\n  };\n\n  /**\n   * It takes an array of options, and for each option, it generates a new variable\n   * @param {boolean} [dom] - boolean - whether or not to generate the DOM elements.\n   */\n  const load = (dom?: boolean) => {\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      generate({\n        count: option.count,\n        variable: option.variable,\n        unit: option.unit,\n        range: option.range,\n        target: option.target,\n        values: option.values,\n        dom: dom === false ? false : true,\n        index: i,\n      });\n    }\n  };\n\n  /**\n   * It returns a string of all the global variables in the current scope\n   * @returns A string of the global variables.\n   */\n  const getVars = (count?: number) => {\n    load(false);\n\n    let varStr = '';\n\n    for (const group of GLOBAL_VARS) {\n      const groupObj = JSON.parse(group);\n      const groupValues = Object.values(groupObj);\n      const groupValue = (groupValues[0] as any).slice(0, count);\n\n      for (const val of groupValue) {\n        const valueKeys = Object.keys(val);\n        const valueValues = Object.values(val);\n        const valueKey = valueKeys[0];\n        const valueValue = valueValues[0];\n\n        varStr += `${valueKey}: ${valueValue};`;\n      }\n    }\n\n    return varStr;\n  };\n\n  /**\n   * It returns an array of all the global variables in the current scope\n   * @param {number} [i] - The index of the variable you want to get. If you don't specify this, it will\n   * return all of the variables.\n   * @returns An array of the global variables.\n   */\n  const getVarsJSON = () => {\n    // Avoid calling the load function if it is not necessary\n    if (GLOBAL_VARS.length === 0) {\n      load(false);\n    }\n\n    let result = '[';\n    for (let i = 0; i < GLOBAL_VARS.length; i++) {\n      result += GLOBAL_VARS[i];\n      if (i !== GLOBAL_VARS.length - 1) {\n        result += ',';\n      }\n    }\n    result += ']';\n    return result;\n  };\n\n  return { load, getVars, getVarsJSON };\n};\n\nexport default randomCSSVariable;\n"],"names":["randomCSSVariable","opts","count","variable","unit","range","min","max","round","target","document","querySelector","values","undefined","IS_ARRAY","Array","isArray","options","GLOBAL_VARS","value","index","VALUES","length","Math","floor","random","delta","window","dom","_variable","VAR_GROUP_VALUE","i","VAR_NAME","push","VAR_VALUE","root","style","setProperty","JSON","stringify","VAR_GROUP","load","option","generate","getVars","varStr","groupObj","parse","group","groupValue","Object","slice","val","valueKeys","keys","valueValues","getVarsJSON","result"],"mappings":"AA4BMA,QAAoB,CACxBC,EAA0D,CACxDC,MAAO,EACPC,SAAU,SACVC,KAAM,GACNC,MAAO,CACLC,IAAK,EACLC,IAAK,IACLC,OAAO,GAETC,OAA0B,2BAAc,KAAOC,SAASC,cAAc,QACtEC,YAAQC,MAGV,MAAMC,EAAWC,MAAMC,QAAQf,GAClBgB,EAAGH,EAAWb,EAAO,CAACA,GAClBiB,EAAa,GAWnBC,EAAG,CAACb,EAAaC,EAAaC,EAAgBY,KACvD,MAAYC,EAAGP,EAAWb,EAAKmB,GAAOR,OAASX,EAAKW,OAEpD,GAAIS,GAAUA,EAAOC,OAAS,EAG5B,OADoBD,EADQE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOC,SAGzD,CACL,QAAcf,EAAMD,EAEpB,OADaE,EAAQe,KAAKf,MAAMF,EAAMiB,KAAKE,SAAWC,GAASpB,EAAMiB,KAAKE,SAAWC,CAEtF,KAOc,EACfxB,MAAAA,EAAQ,EACRC,SAAAA,EAAW,SACXC,KAAAA,EAAO,GACPC,MAAAA,EAAQ,CACNC,IAAK,EACLC,IAAK,IACLC,OAAO,GAETC,OAAAA,GAA2B,oBAAXkB,OAAyB,KAAOjB,SAASC,cAAc,SACvEiB,MACAR,YAEA,QAAaX,IAC+C,KAC1C,CAAEoB,CAAC1B,GAAqB2B,GAGpCR,EAASpB,EAEf,IAAK,IAAI6B,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAC/B,MAAcC,EAAa,IAAV9B,EAAc,KAAKC,IAAa,KAAKA,KAAY4B,MAC/B3B,KAC5Be,EAAMd,EAAOC,IAAMD,EAAOE,IAAMF,EAAOG,MAAQY,KAAShB,IAC3De,EAAMd,EAAOC,IAAMD,EAAOE,IAAMF,EAAOG,MAAQY,GAEnDU,EAAgBG,KAAK,CACnBD,CAACA,GAAqBE,IAEpBC,GAAQP,GACVO,EAAKC,MAAMC,YAAY,GAAGL,IAAY,GAAGE,IAE5C,CAEDhB,EAAYe,KAAKK,KAAKC,UAAUC,GAAU,EAOlCC,EAAIb,IACZ,IAAK,MAAQ,EAAGG,EAAId,EAAQK,OAAQS,IAAK,CACvC,MAAYW,EAAGzB,EAAQc,GACvBY,EAAS,CACPzC,MAAOwC,EAAOxC,MACdC,SAAUuC,EAAOvC,SACjBC,KAAMsC,EAAOtC,KACbC,MAAOqC,EAAOrC,MACdI,OAAQiC,EAAOjC,OACfG,OAAQ8B,EAAO9B,OACfgB,KAAa,IAARA,EACLR,MAAOW,GAEV,GAqDH,MAAO,CAAEU,OAAMG,QA9CE1C,IACfuC,GAAK,GAEL,IAAII,EAAS,GAEb,IAAK,WAAe3B,EAAa,CAC/B,MAAc4B,EAAGR,KAAKS,MAAMC,GAEtBC,EADcC,OAAOtC,OAAOkC,GACF,GAAWK,MAAM,EAAGjD,GAEpD,IAAK,MAAMkD,KAAiBH,EAAE,CAC5B,MAAMI,EAAYH,OAAOI,KAAKF,GACxBG,EAAcL,OAAOtC,OAAOwC,GAIlCP,GAAa,GAHIQ,EAAU,OACRE,EAAY,KAGhC,CACF,CAED,OAAOV,GA0BeW,YAjBJ,KAES,IAAvBtC,EAAYI,QACdmB,GAAK,GAGP,MAAa,IACb,IAAK,MAAQ,EAAGV,EAAIb,EAAYI,OAAQS,IACtC0B,GAAUvC,EAAYa,GAClBA,IAAMb,EAAYI,OAAS,IAC7BmC,GAAU,KAId,OADAA,GAAU,IAEZA"}